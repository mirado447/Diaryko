/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.journal.diaryko.endpoint.rest.api;

import com.journal.diaryko.endpoint.rest.model.BadRequestException;
import com.journal.diaryko.endpoint.rest.model.InternalServerException;
import com.journal.diaryko.endpoint.rest.model.ResourceNotFoundException;
import com.journal.diaryko.endpoint.rest.model.Tag;
import com.journal.diaryko.endpoint.rest.model.TooManyRequestsException;
import io.swagger.annotations.ApiParam;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-03T07:38:36.366062500+03:00[Africa/Nairobi]")

@Validated
@io.swagger.v3.oas.annotations.tags.Tag(name = "Tag", description = "the Tag API")
public interface TagCategoriesApi {

    /**
     * GET /tagCategories/{cid}/tags/{tid} : get tag by id
     *
     * @param cid  (required)
     * @param tid  (required)
     * @return identified tag (status code 200)
     *         or Bad request (status code 400)
     *         or Not found (status code 404)
     *         or Too many requests to the API (status code 429)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTagById",
        summary = "get tag by id",
        tags = { "Tag" },
        responses = {
            @ApiResponse(responseCode = "200", description = "identified tag", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tag.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestException.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceNotFoundException.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many requests to the API", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TooManyRequestsException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tagCategories/{cid}/tags/{tid}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Tag> getTagById(
        @ApiParam(value = "",required=true) @PathVariable("cid") String cid,
        @ApiParam(value = "",required=true) @PathVariable("tid") String tid
    );


    /**
     * GET /tagCategories : get all tag categories
     *
     * @return List of tag categories (status code 200)
     *         or Bad request (status code 400)
     *         or Not found (status code 404)
     *         or Too many requests to the API (status code 429)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTagCategories",
        summary = "get all tag categories",
        tags = { "Tag" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of tag categories", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Tag.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestException.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceNotFoundException.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many requests to the API", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TooManyRequestsException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tagCategories",
        produces = { "application/json" }
    )
    
    ResponseEntity<> getTagCategories(
        
    );


    /**
     * GET /tagCategories/{cid}/tags : get all tags by tag categories id
     *
     * @param cid  (required)
     * @return List of tags by tag categories id (status code 200)
     *         or Bad request (status code 400)
     *         or Not found (status code 404)
     *         or Too many requests to the API (status code 429)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTags",
        summary = "get all tags by tag categories id",
        tags = { "Tag" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of tags by tag categories id", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Tag.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestException.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceNotFoundException.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many requests to the API", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TooManyRequestsException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tagCategories/{cid}/tags",
        produces = { "application/json" }
    )
    
    ResponseEntity<> getTags(
        @ApiParam(value = "",required=true) @PathVariable("cid") String cid
    );

}
